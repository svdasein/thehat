#!/usr/bin/env ruby
#################################################################################
# TheHat - an interactive workflow system
# Copyright (C) 2007-2014 by David Parker. All rights reserved
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#################################################################################

require 'thehat/wfappframe'
require "xmpp4r"
require 'xmpp4r/muc'

class XMPPFrontend < HatApp


	def initialize
		super
		getConfig('thehat-xmpp',[:account,:host,:resource,:password,:room,:respondTo])
	end	
	

	def run
		Jabber.debug=(false)
		done = false
		account = configValue(:account)
		host = configValue(:host)
		resource = configValue(:resource)
		respondTo = configValue(:respondTo) || resource
		password = configValue(:password)
		room = configValue(:room)
		
		begin
			logmessage(:app,"Connecting: #{account}@#{host}/#{resource}  #{password}")
			client = Jabber::Client.new("#{account}@#{host}/#{resource}")
			client.allow_tls = true
			client.connect
			client.auth(password)
		rescue
			logmessage(:error,"Error connecting: #{$!}")
			exit
		end
		logmessage(:app,"Connected: #{account}@#{host}/#{resource}")
		logmessage(:app,"Address me as '#{respondTo}'")
		
		
		my_muc = Jabber::MUC::SimpleMUCClient.new(client)
		logmessage(:app,"Starting listener thread")
		my_muc.on_message { |time,nic,text|
			if not time # ones with time are historical and dizzyingly confusing to the bot
				if nic != resource # if this is something *I* said, which... do not want
					logmessage(:user,"<#{nic}> #{text}")
					if text =~ /^#{respondTo}[: ,]+(.*)/ or text =~ /^#{respondTo}$/
						begin
							@mutex.synchronize do
								if cmd = $1
									if cmd == 'quit'
										logmessage(:cmd,"Got quit, setting done to true")
										done = true
									else
										@workflow.processCommand(nic,cmd)
									end
								else
									@workflow.processCommand(nic,'')
								end
								drainMessages(:cmd) { |line|
									my_muc.say(line)
								}
							end
						rescue
							logmessage(:error,$!)
							my_muc.say($!)
						end
					end
				#else
				#	logmessage(:app,"Ignoring message from self")
				end
			end
		}
		logmessage(:app,"Joining MUC group #{room}/#{resource}")
		my_muc.join(Jabber::JID.new("#{room}/#{resource}"))
		drainMessages(:cmd) { |line|
			my_muc.say(line)
		}
		logmessage(:clock,"Starting clock loop")
		while not done
			@mutex.synchronize do
				begin
					@workflow.ticToc(false) # if true, it's quite noisy
					drainMessages(:clock) { |line|
						my_muc.say(line)
					}
				rescue
					logmessage(:error,$!)
					my_muc.say($!)
				end
			end
			sleep(5)
		end
	end
end

XMPPFrontend.new.run
