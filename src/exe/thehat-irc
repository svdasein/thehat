#!/usr/bin/env ruby
###########################################################################
# This file is part of TheHat - an interactive appFrame system
# Copyright (C) 2007-2014 by David Parker. All rights reserved
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
###########################################################################

require 'thehat/wfappframe'
require 'thread'
require 'cinch'

class IRCFrontend < HatApp

	def initialize
		super
		getConfig('thehat-irc',[:nic,:server,:port,:name,:channel])
		@config['channel'] = "##{@config['channel']}"
	end	
	
	def run	
		appFrame = self
		channelName = appFrame.configValue(:channel)
		botNick = appFrame.configValue(:nic)
		botAlias = appFrame.configValue(:respondTo)
		if not botAlias or botAlias.size == 0
			botAlias = botNick
		end
		ircSession = Cinch::Bot.new do
			loggers.level = :info
			configure do |c|
				c.server = appFrame.configValue(:server)
				c.nick = appFrame.configValue(:nic)
				c.port = appFrame.configValue(:port)
				c.name = appFrame.configValue(:name)
				c.channels = [channelName]
			end
			on :connect do |m|
				#botNick = ircSession.nick
				appFrame.logmessage(:com,"connected as #{botNick}")
				appFrame.logmessage(:app,"joined #{channelName}, saying hello")
				appFrame.drainMessages(:app) { |line|
					Channel(channelName).send(line)
				}

				appFrame.logmessage(:app,"listening for commands")
				Channel(channelName).send("I answer to the name '#{botAlias}'")
				Thread.new {
					appFrame.logmessage(:clock,"starting clock thread")
					while true
						appFrame.mutex.synchronize do
							begin
								appFrame.workflow.ticToc(false) # if true, it's quite noisy
								appFrame.drainMessages(:clock) { |line|
									Channel(channelName).send(line)
								}
							rescue
								appFrame.logmessage(:error,$!)
								Channel(channelName).send($!)
							end
						end
						sleep(5)
					end
				}
			end
		
			on :privmsg,  /#{botAlias}[: ,]+(.*)/ do |event, query|
				appFrame.logmessage(:user,"#{event.channel.name} #{event.user.nick}: '#{query}'")
				begin
					appFrame.mutex.synchronize do
						if cmd = query
							if cmd =~ /^quit$|^shutdown$/
								ircSession.quit
							else
								appFrame.workflow.processCommand(event.user.nick,cmd)
							end
						else
							appFrame.workflow.processCommand(event.user.nick,'')
						end
						appFrame.drainMessages(:cmd) { |line|
							Channel(channelName).send(line)
						}
					end
				rescue
					appFrame.logmessage(:error,$!)
					Channel(channelName).send($!)
				end
			end
		end
		ircSession.start
		appFrame.logmessage(:app,"shutdown")
	end
end

IRCFrontend.new.run
